//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteControl.Galileo {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Galileo.IGalileo")]
    public interface IGalileo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGalileo/Start", ReplyAction="http://tempuri.org/IGalileo/StartResponse")]
        bool Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGalileo/Start", ReplyAction="http://tempuri.org/IGalileo/StartResponse")]
        System.Threading.Tasks.Task<bool> StartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGalileo/Stop", ReplyAction="http://tempuri.org/IGalileo/StopResponse")]
        bool Stop(bool immeadeatly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGalileo/Stop", ReplyAction="http://tempuri.org/IGalileo/StopResponse")]
        System.Threading.Tasks.Task<bool> StopAsync(bool immeadeatly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGalileo/Shutdown", ReplyAction="http://tempuri.org/IGalileo/ShutdownResponse")]
        bool Shutdown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGalileo/Shutdown", ReplyAction="http://tempuri.org/IGalileo/ShutdownResponse")]
        System.Threading.Tasks.Task<bool> ShutdownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGalileo/Restart", ReplyAction="http://tempuri.org/IGalileo/RestartResponse")]
        bool Restart();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGalileo/Restart", ReplyAction="http://tempuri.org/IGalileo/RestartResponse")]
        System.Threading.Tasks.Task<bool> RestartAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGalileoChannel : RemoteControl.Galileo.IGalileo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GalileoClient : System.ServiceModel.ClientBase<RemoteControl.Galileo.IGalileo>, RemoteControl.Galileo.IGalileo {
        
        public GalileoClient() {
        }
        
        public GalileoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GalileoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GalileoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GalileoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Start() {
            return base.Channel.Start();
        }
        
        public System.Threading.Tasks.Task<bool> StartAsync() {
            return base.Channel.StartAsync();
        }
        
        public bool Stop(bool immeadeatly) {
            return base.Channel.Stop(immeadeatly);
        }
        
        public System.Threading.Tasks.Task<bool> StopAsync(bool immeadeatly) {
            return base.Channel.StopAsync(immeadeatly);
        }
        
        public bool Shutdown() {
            return base.Channel.Shutdown();
        }
        
        public System.Threading.Tasks.Task<bool> ShutdownAsync() {
            return base.Channel.ShutdownAsync();
        }
        
        public bool Restart() {
            return base.Channel.Restart();
        }
        
        public System.Threading.Tasks.Task<bool> RestartAsync() {
            return base.Channel.RestartAsync();
        }
    }
}
